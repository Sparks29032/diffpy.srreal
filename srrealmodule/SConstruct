#Import("env")
#
## Let's not mess up the global environment
#wrapperenv = env.Clone()
wrapperenv = DefaultEnvironment()

# Make sure we use the proper python build options
wrapperenv.ParseConfig("python-config --includes")
wrapperenv.ParseConfig("python-config --ldflags")

# Look here for our shared library
wrapperenv.Append(LIBPATH = "../libsrreal")

# Get rid of the lib prefix
wrapperenv["SHLIBPREFIX"]=""

# Make correct suffix
import os
if os.name == 'nt':
    wrapperenv['SHLIBSUFFIX']='.pyd'
else: 
    wrapperenv['SHLIBSUFFIX']='.so'

# Append objcryst libraries and required boost library
wrapperenv.Append(LIBS = ["srreal", "boost_python"])

# Identify the headers for SrReal
wrapperenv.Append(CPPPATH = "../libsrreal")

# ObjCryst - temporary hack from ../libsrreal/SConstruct
# Determine paths to ObjCryst headers and shared library
# We should replace this with an objcryst-config script.
from pkg_resources import get_distribution
ocbase = get_distribution("pyobjcryst").location
ocinclude = os.path.join(ocbase, 'include/ObjCryst')
wrapperenv.AppendUnique(CPPPATH=ocinclude)
print ocinclude

# Get the modules
modfiles = Glob("*_ext.cpp")

# 2009-08-21 PJ - let's just keep loadable modules separate
# I consider building with setup.py as a simple extension,
# assuming all the srreal and objcryst libraries are properly
# installed.  This needs more thought.
pdf_ext = wrapperenv.LoadableModule("pdf_ext.cpp")
